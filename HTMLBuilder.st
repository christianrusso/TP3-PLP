TestCase subclass: #HtmlBuilderTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HTMLBuilder'!!HtmlBuilderTest commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State the name of the class with one line description: For example, I'm xxx the root of the hierarchy of visitor objects.For the Responsibility part: Three sentences about my main responsibility, what I'm doing, what services do I offer.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - what is the way to create instances is a plus.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!HtmlBuilderTest methodsFor: 'as yet unclassified' stamp: 'FernandoGasperi 11/8/2015 13:19'!testHtmlBuildsDocumentWithEmptyBody	self assert: (Html build: [ :html | html body: [] ]) 		  equals: '<!!DOCTYPE html><html><body></body></html>'.! !!HtmlBuilderTest methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/8/2015 16:29'!testHtmlBuildWithAllNodes	self assert: (Html build: [ :html |						html body: [							html h1: 'Titulo '.							html p: 'Lorem ipsum dolor sit amet , consectetur adipisicing elit .'.							html h2: 'Subtitulo '.							html p: [								html append: 'Duis aute irure dolor in reprehenderit in voluptate '.								html append: ' eu fugiat nulla pariatur .'							]						]				    ])			equals: '<!!DOCTYPE html><html><body><h1>Titulo </h1><p>Lorem ipsum dolor sit amet , consectetur adipisicing elit .</p><h2>Subtitulo </h2><p>Duis aute irure dolor in reprehenderit in voluptate  eu fugiat nulla pariatur .</p></body></html>'.! !!HtmlBuilderTest methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/8/2015 17:15'!testHtmlPushPopNodes	| builder |	builder := Html new.		builder pushChildNode: (HtmlNode new).		builder pushChildNode: HeadNode new.	builder popNode.		builder pushChildNode: BodyNode new.	builder popNode.		builder popNode.		self assert: (builder contents) equals: '<!!DOCTYPE html><html><head></head><body></body></html>'.! !!HtmlBuilderTest methodsFor: 'as yet unclassified' stamp: 'FernandoGasperi 11/8/2015 13:19'!testHtmlBuildsEmptyDocument	self assert: (Html build: [ :html |  ]) equals: '<!!DOCTYPE html><html></html>'.! !!HtmlBuilderTest methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/8/2015 20:41'!testHtmlHeadTitleAppend	self assert: (Html build: [ :html |						html head title append: 'Lorem ipsum'						])			equals: '<!!DOCTYPE html><html><head><title>Lorem ipsum</title></head></html>'.! !!HtmlBuilderTest methodsFor: 'as yet unclassified' stamp: 'FernandoGasperi 11/8/2015 13:23'!testHtmlBuildsBodyWithH1	self assert: (Html build: [ :html | 					  	 html body: [						 	html h1: 'Titulo'.						 ] 					  ]) 		  equals: '<!!DOCTYPE html><html><body><h1>Titulo</h1></body></html>'.! !!HtmlBuilderTest methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/8/2015 20:42'!testHtmlHeadTitle	self assert: (Html build: [ :html |						html head title: 'Lorem ipsum'						])			equals: '<!!DOCTYPE html><html><head><title>Lorem ipsum</title></head></html>'.! !!HtmlBuilderTest methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/8/2015 17:18'!testHtmlWithMessage	self assert: (Html build: [ :html |						html body with: [							html append: 'Lorem ipsum'							]						])			equals: '<!!DOCTYPE html><html><body>Lorem ipsum</body></html>'.! !!HtmlBuilderTest methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/8/2015 16:48'!testHtmlNodeOpenAndCloseTag	|ws node1 |	ws := WriteStream on: String new.	node1 := HtmlNode new.	node1 openTag: ws.	node1 closeTag: ws.	self assert: (ws contents) equals: '<html></html>'.! !Object subclass: #Node	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HTMLBuilder'!!Node methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 03:45'!validate: html	(self isKindOf: HtmlNode)	ifFalse: [		| parent |		parent := html lastNode.		(parent validChild: self)		ifFalse: [ 			^self error: 'Anidamiento de tags invalido'.		].	]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Node class	instanceVariableNames: ''!!Node class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 19:16'!new: builder	^self new.! !Node subclass: #DivNode	instanceVariableNames: ''	classVariableNames: 'CanHave Name'	poolDictionaries: ''	category: 'HTMLBuilder'!!DivNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!openTag: ws	ws << ('<', self class tagName, '>').! !!DivNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!validChild: otherNode	^(self class canHave includes: (otherNode class getName))! !!DivNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!closeTag: ws	ws << ('</', self class tagName, '>').! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DivNode class	instanceVariableNames: ''!!DivNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 18:57'!initialize	Name := #Div.	CanHave := #(Table H1 H2 P B Div).! !!DivNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!canHave	^CanHave.! !!DivNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!getName	^Name.! !!DivNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!tagName	^Name asString asLowercase.! !Node subclass: #NotaNode	instanceVariableNames: ''	classVariableNames: 'CanHave Name'	poolDictionaries: ''	category: 'HTMLBuilder'!!NotaNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 19:11'!openTag: ws	ws << ('<', self class tagName, '>').! !!NotaNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 19:11'!validChild: otherNode	^(self class canHave includes: (otherNode class getName))! !!NotaNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 19:11'!closeTag: ws	ws << ('</', self class tagName, '>').! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!NotaNode class	instanceVariableNames: ''!!NotaNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 19:11'!canHave	^CanHave.! !!NotaNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 19:11'!getName	^Name.! !!NotaNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 19:11'!tagName	^Name asString asLowercase.! !Node subclass: #BodyNode	instanceVariableNames: ''	classVariableNames: 'CanHave Name'	poolDictionaries: ''	category: 'HTMLBuilder'!!BodyNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!openTag: ws	ws << ('<', self class tagName, '>').! !!BodyNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!validChild: otherNode	^(self class canHave includes: (otherNode class getName))! !!BodyNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!closeTag: ws	ws << ('</', self class tagName, '>').! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BodyNode class	instanceVariableNames: ''!!BodyNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 19:11'!initialize	Name := #Body.	CanHave := #(Table H1 H2 P B Div Basico2 Nota).! !!BodyNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!canHave	^CanHave.! !!BodyNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!getName	^Name.! !!BodyNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!tagName	^Name asString asLowercase.! !Node subclass: #TRNode	instanceVariableNames: ''	classVariableNames: 'CanHave Name'	poolDictionaries: ''	category: 'HTMLBuilder'!!TRNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!openTag: ws	ws << ('<', self class tagName, '>').! !!TRNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!validChild: otherNode	^(self class canHave includes: (otherNode class getName))! !!TRNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!closeTag: ws	ws << ('</', self class tagName, '>').! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TRNode class	instanceVariableNames: ''!!TRNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 18:56'!initialize	Name := #TR.	CanHave := #(TD).! !!TRNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!canHave	^CanHave.! !!TRNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!getName	^Name.! !!TRNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!tagName	^Name asString asLowercase.! !Node subclass: #TitleNode	instanceVariableNames: ''	classVariableNames: 'CanHave Name'	poolDictionaries: ''	category: 'HTMLBuilder'!!TitleNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!openTag: ws	ws << ('<', self class tagName, '>').! !!TitleNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!validChild: otherNode	^(self class canHave includes: (otherNode class getName))! !!TitleNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!closeTag: ws	ws << ('</', self class tagName, '>').! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TitleNode class	instanceVariableNames: ''!!TitleNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 18:57'!initialize	Name := #Title.	CanHave := #().! !!TitleNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!canHave	^CanHave.! !!TitleNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!getName	^Name.! !!TitleNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!tagName	^Name asString asLowercase.! !Node subclass: #H2Node	instanceVariableNames: ''	classVariableNames: 'CanHave Name'	poolDictionaries: ''	category: 'HTMLBuilder'!!H2Node methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!openTag: ws	ws << ('<', self class tagName, '>').! !!H2Node methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!validChild: otherNode	^(self class canHave includes: (otherNode class getName))! !!H2Node methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!closeTag: ws	ws << ('</', self class tagName, '>').! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!H2Node class	instanceVariableNames: ''!!H2Node class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 18:57'!initialize	Name := #H2.	CanHave := #().! !!H2Node class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!canHave	^CanHave.! !!H2Node class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!getName	^Name.! !!H2Node class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!tagName	^Name asString asLowercase.! !Node subclass: #TDNode	instanceVariableNames: ''	classVariableNames: 'CanHave Name'	poolDictionaries: ''	category: 'HTMLBuilder'!!TDNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!openTag: ws	ws << ('<', self class tagName, '>').! !!TDNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!validChild: otherNode	^(self class canHave includes: (otherNode class getName))! !!TDNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!closeTag: ws	ws << ('</', self class tagName, '>').! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TDNode class	instanceVariableNames: ''!!TDNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 18:55'!initialize	Name := #TD.	CanHave := #(Table H1 H2 P B Div).! !!TDNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!canHave	^CanHave.! !!TDNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!getName	^Name.! !!TDNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!tagName	^Name asString asLowercase.! !Node subclass: #PNode	instanceVariableNames: ''	classVariableNames: 'CanHave Name'	poolDictionaries: ''	category: 'HTMLBuilder'!!PNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!openTag: ws	ws << ('<', self class tagName, '>').! !!PNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!validChild: otherNode	^(self class canHave includes: (otherNode class getName))! !!PNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!closeTag: ws	ws << ('</', self class tagName, '>').! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PNode class	instanceVariableNames: ''!!PNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 18:55'!initialize	Name := #P.	CanHave := #(B).! !!PNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!canHave	^CanHave.! !!PNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!getName	^Name.! !!PNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!tagName	^Name asString asLowercase.! !Node subclass: #H1Node	instanceVariableNames: ''	classVariableNames: 'CanHave Name'	poolDictionaries: ''	category: 'HTMLBuilder'!!H1Node methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!openTag: ws	ws << ('<', self class tagName, '>').! !!H1Node methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!validChild: otherNode	^(self class canHave includes: (otherNode class getName))! !!H1Node methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!closeTag: ws	ws << ('</', self class tagName, '>').! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!H1Node class	instanceVariableNames: ''!!H1Node class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 18:57'!initialize	Name := #H1.	CanHave := #().! !!H1Node class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!canHave	^CanHave.! !!H1Node class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!getName	^Name.! !!H1Node class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!tagName	^Name asString asLowercase.! !Object subclass: #Html	instanceVariableNames: 'ws stack'	classVariableNames: ''	poolDictionaries: ''	category: 'HTMLBuilder'!!Html methodsFor: 'StreamMethods' stamp: 'FernandoGasperi 11/8/2015 13:16'!contents	^ws contents.! !!Html methodsFor: 'StackMethods' stamp: 'GuidoTagliaviniPonce 11/14/2015 20:36'!pushMark	stack push: Mark new.! !!Html methodsFor: 'StackMethods' stamp: 'GuidoTagliaviniPonce 11/14/2015 20:39'!popUntilMark	[ (stack top isKindOf: Mark) not] whileTrue: [ self popNode. ].! !!Html methodsFor: 'StackMethods' stamp: 'GuidoTagliaviniPonce 11/14/2015 20:32'!popMark	stack pop.! !!Html methodsFor: 'StackMethods' stamp: 'GuidoTagliaviniPonce 11/14/2015 21:29'!pushChildNode: node	node validate: self.	node openTag: ws.	stack push: node.! !!Html methodsFor: 'StackMethods' stamp: 'GuidoTagliaviniPonce 11/14/2015 21:33'!lastNode	| stackCopy |	stackCopy := stack deepCopy.	[ stackCopy top isKindOf: Mark] whileTrue: [ stackCopy pop ].	^(stackCopy top).! !!Html methodsFor: 'StackMethods' stamp: 'GuidoTagliaviniPonce 11/14/2015 13:32'!popNode	| node |	node := stack pop.	node closeTag: ws.! !!Html methodsFor: 'Initialization' stamp: 'GuidoTagliaviniPonce 11/15/2015 17:45'!initialize	ws := WriteStream on: String new.	ws << '<!!DOCTYPE html>'.	stack := Stack new.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 05:21'!div	self pushChildNode: DivNode new.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 05:21'!table	self pushChildNode: TableNode new.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 15:13'!h1: arg	self pushChildNode: H1Node new.	self evaluate: arg.	self popUntilMark.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 05:21'!div: arg	self pushChildNode: DivNode new.	self evaluate: arg.	self popUntilMark.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 05:21'!b: arg	self pushChildNode: BNode new.	self evaluate: arg.	self popUntilMark.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 05:21'!th	self pushChildNode: THNode new.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 05:21'!td: arg	self pushChildNode: TDNode new.	self evaluate: arg.	self popUntilMark.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 15:13'!h1	self pushChildNode: H1Node new.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 17:40'!body	self pushChildNode: BodyNode new.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 05:21'!table: arg	self pushChildNode: TableNode new.	self evaluate: arg.	self popUntilMark.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 05:21'!title: arg	self pushChildNode: TitleNode new.	self evaluate: arg.	self popUntilMark.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 05:21'!td	self pushChildNode: TDNode new.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 05:21'!h2: arg	self pushChildNode: H2Node new.	self evaluate: arg.	self popUntilMark.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 05:21'!th: arg	self pushChildNode: THNode new.	self evaluate: arg.	self popUntilMark.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 05:21'!b	self pushChildNode: BNode new.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 05:21'!p: arg	self pushChildNode: PNode new.	self evaluate: arg.	self popUntilMark.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 05:21'!tr: arg	self pushChildNode: TRNode new.	self evaluate: arg.	self popUntilMark.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 05:21'!h2	self pushChildNode: H2Node new.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 05:21'!p	self pushChildNode: PNode new.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 05:21'!tr	self pushChildNode: TRNode new.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/14/2015 20:31'!html: aBlock	self pushChildNode: HtmlNode new.	self pushMark.	aBlock value: self.	self popMark.	self popNode.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 17:40'!head	self pushChildNode: HeadNode new.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 17:40'!head: arg	self pushChildNode: HeadNode new.	self evaluate: arg.	self popUntilMark.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 05:21'!title	self pushChildNode: TitleNode new.	^self.! !!Html methodsFor: 'BaseTagsMethods' stamp: 'GuidoTagliaviniPonce 11/15/2015 17:40'!body: arg	self pushChildNode: BodyNode new.	self evaluate: arg.	self popUntilMark.	^self.! !!Html methodsFor: 'BlockMethods' stamp: 'GuidoTagliaviniPonce 11/14/2015 20:41'!evaluate: aBlockOrString	self pushMark.	(aBlockOrString isKindOf: String)	ifTrue: [ ws << aBlockOrString ]	ifFalse: [		(aBlockOrString isKindOf: BlockClosure)		ifTrue: [ aBlockOrString value ]		ifFalse: [ ^self error: 'Error de formato' ] 	].	self popMark.! !!Html methodsFor: 'BlockMethods' stamp: 'GuidoTagliaviniPonce 11/14/2015 20:18'!append: string	ws << string.	self popUntilMark.	^self.! !!Html methodsFor: 'BlockMethods' stamp: 'GuidoTagliaviniPonce 11/14/2015 20:18'!with: aBlock	self evaluate: aBlock.	self popUntilMark.	^self.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Html class	instanceVariableNames: ''!!Html class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/8/2015 16:03'!build: aBlock	| builder |	builder := self new.	builder html: aBlock.	^builder contents.! !!Html class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 17:46'!defNode: tagName canHave: tagNames	| newNodeClass tagMessageName  |	newNodeClass := Node 	subclass: (tagName asString, 'Node') asSymbol								instanceVariableNames: ''								classVariableNames: ''								category: 'HTMLBuilder'.		"Atributos de clase para guardar el nombre y las restricciones."	newNodeClass addClassVarNamed: 'Name'.	newNodeClass classVarNamed: 'Name' put: tagName.		newNodeClass addClassVarNamed: 'CanHave'.	newNodeClass classVarNamed: 'CanHave' put: tagNames.		"Metodos de clase para devolver estos atributos."	newNodeClass class compile: ('getName	^Name.').		newNodeClass class compile: ('canHave	^CanHave.').		newNodeClass class compile: ('tagName	^Name asString asLowercase.').		"Metodos de instancia para validacion e impresion de tags."	newNodeClass compile: ('validChild: otherNode	^(self class canHave includes: (otherNode class getName))').		newNodeClass compile: ('openTag: ws	ws << (', '''', '<', '''', ', self class tagName, ', '''', '>', ''').').		newNodeClass compile: ('closeTag: ws	ws << (', '''', '</', '''', ', self class tagName, ', '''', '>', ''').').		"Metodos de html para procesar los mensajes asociados al tag."	tagMessageName := tagName asString asLowercase.			Html compile: (tagMessageName, '	self pushChildNode: ', newNodeClass asString, ' new.	^self.').													Html compile: (tagMessageName, ': arg	self pushChildNode: ', newNodeClass asString, ' new.	self evaluate: arg.	self popUntilMark.	^self.').	! !!Html class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 03:09'!defNode: tagName  self defNode: tagName canHave: #()! !Object subclass: #Mark	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'HTMLBuilder'!Node subclass: #TableNode	instanceVariableNames: ''	classVariableNames: 'CanHave Name'	poolDictionaries: ''	category: 'HTMLBuilder'!!TableNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!openTag: ws	ws << ('<', self class tagName, '>').! !!TableNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!validChild: otherNode	^(self class canHave includes: (otherNode class getName))! !!TableNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!closeTag: ws	ws << ('</', self class tagName, '>').! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TableNode class	instanceVariableNames: ''!!TableNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 18:57'!initialize	Name := #Table.	CanHave := #(TR TH).! !!TableNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!canHave	^CanHave.! !!TableNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!getName	^Name.! !!TableNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!tagName	^Name asString asLowercase.! !Node subclass: #RestringidoNode	instanceVariableNames: ''	classVariableNames: 'CanHave Name'	poolDictionaries: ''	category: 'HTMLBuilder'!!RestringidoNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 19:11'!openTag: ws	ws << ('<', self class tagName, '>').! !!RestringidoNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 19:11'!validChild: otherNode	^(self class canHave includes: (otherNode class getName))! !!RestringidoNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 19:11'!closeTag: ws	ws << ('</', self class tagName, '>').! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!RestringidoNode class	instanceVariableNames: ''!!RestringidoNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 19:11'!canHave	^CanHave.! !!RestringidoNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 19:11'!getName	^Name.! !!RestringidoNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 19:11'!tagName	^Name asString asLowercase.! !Node subclass: #BNode	instanceVariableNames: ''	classVariableNames: 'CanHave Name'	poolDictionaries: ''	category: 'HTMLBuilder'!!BNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!openTag: ws	ws << ('<', self class tagName, '>').! !!BNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!validChild: otherNode	^(self class canHave includes: (otherNode class getName))! !!BNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!closeTag: ws	ws << ('</', self class tagName, '>').! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!BNode class	instanceVariableNames: ''!!BNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 18:57'!initialize	Name := #B.	CanHave := #().! !!BNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!canHave	^CanHave.! !!BNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!getName	^Name.! !!BNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!tagName	^Name asString asLowercase.! !Node subclass: #HtmlNode	instanceVariableNames: ''	classVariableNames: 'CanHave Name'	poolDictionaries: ''	category: 'HTMLBuilder'!!HtmlNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!openTag: ws	ws << ('<', self class tagName, '>').! !!HtmlNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!validChild: otherNode	^(self class canHave includes: (otherNode class getName))! !!HtmlNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!closeTag: ws	ws << ('</', self class tagName, '>').! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HtmlNode class	instanceVariableNames: ''!!HtmlNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 19:11'!initialize	Name := #Html.	CanHave := #(Head Body Basico Articulo).	! !!HtmlNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!canHave	^CanHave.! !!HtmlNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!getName	^Name.! !!HtmlNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!tagName	^Name asString asLowercase.! !Node subclass: #HeadNode	instanceVariableNames: ''	classVariableNames: 'CanHave Name'	poolDictionaries: ''	category: 'HTMLBuilder'!!HeadNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!openTag: ws	ws << ('<', self class tagName, '>').! !!HeadNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!validChild: otherNode	^(self class canHave includes: (otherNode class getName))! !!HeadNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!closeTag: ws	ws << ('</', self class tagName, '>').! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!HeadNode class	instanceVariableNames: ''!!HeadNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 18:58'!initialize	Name := #Head.	CanHave := #(Title).! !!HeadNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!tagName	^Name asString asLowercase.! !!HeadNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!getName	^Name.! !!HeadNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!canHave	^CanHave.! !Node subclass: #THNode	instanceVariableNames: ''	classVariableNames: 'CanHave Name'	poolDictionaries: ''	category: 'HTMLBuilder'!!THNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!openTag: ws	ws << ('<', self class tagName, '>').! !!THNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!validChild: otherNode	^(self class canHave includes: (otherNode class getName))! !!THNode methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!closeTag: ws	ws << ('</', self class tagName, '>').! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!THNode class	instanceVariableNames: ''!!THNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 18:56'!initialize	Name := #TH.	CanHave := #(TD).! !!THNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!canHave	^CanHave.! !!THNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!getName	^Name.! !!THNode class methodsFor: 'as yet unclassified' stamp: 'GuidoTagliaviniPonce 11/15/2015 16:33'!tagName	^Name asString asLowercase.! !DivNode initialize!BodyNode initialize!TRNode initialize!TitleNode initialize!H2Node initialize!TDNode initialize!PNode initialize!H1Node initialize!TableNode initialize!BNode initialize!HtmlNode initialize!HeadNode initialize!THNode initialize!